// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: field_type.sql

package sqlc

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
)

const createFieldType = `-- name: CreateFieldType :one
INSERT INTO field_types (
    id, 
    name, 
    type_discriminator_id,
    properties
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, name, type_discriminator_id, properties, created_at, updated_at
`

type CreateFieldTypeParams struct {
	ID                  uuid.UUID       `json:"id"`
	Name                string          `json:"name"`
	TypeDiscriminatorID uuid.UUID       `json:"typeDiscriminatorId"`
	Properties          json.RawMessage `json:"properties"`
}

func (q *Queries) CreateFieldType(ctx context.Context, arg CreateFieldTypeParams) (FieldType, error) {
	row := q.db.QueryRowContext(ctx, createFieldType,
		arg.ID,
		arg.Name,
		arg.TypeDiscriminatorID,
		arg.Properties,
	)
	var i FieldType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.TypeDiscriminatorID,
		&i.Properties,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteFieldType = `-- name: DeleteFieldType :exec
DELETE FROM field_types
WHERE id = $1
`

func (q *Queries) DeleteFieldType(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteFieldType, id)
	return err
}

const getFieldType = `-- name: GetFieldType :one
SELECT id, name, type_discriminator_id, properties, created_at, updated_at FROM field_types
WHERE id = $1
`

func (q *Queries) GetFieldType(ctx context.Context, id uuid.UUID) (FieldType, error) {
	row := q.db.QueryRowContext(ctx, getFieldType, id)
	var i FieldType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.TypeDiscriminatorID,
		&i.Properties,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listFieldTypes = `-- name: ListFieldTypes :many
SELECT id, name, type_discriminator_id, properties, created_at, updated_at FROM field_types
`

func (q *Queries) ListFieldTypes(ctx context.Context) ([]FieldType, error) {
	rows, err := q.db.QueryContext(ctx, listFieldTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FieldType{}
	for rows.Next() {
		var i FieldType
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.TypeDiscriminatorID,
			&i.Properties,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFieldType = `-- name: UpdateFieldType :one
UPDATE field_types
SET name = $2,
    type_discriminator_id = $3,
    properties = $4,
    updated_at = NOW()
WHERE id = $1
RETURNING id, name, type_discriminator_id, properties, created_at, updated_at
`

type UpdateFieldTypeParams struct {
	ID                  uuid.UUID       `json:"id"`
	Name                string          `json:"name"`
	TypeDiscriminatorID uuid.UUID       `json:"typeDiscriminatorId"`
	Properties          json.RawMessage `json:"properties"`
}

func (q *Queries) UpdateFieldType(ctx context.Context, arg UpdateFieldTypeParams) (FieldType, error) {
	row := q.db.QueryRowContext(ctx, updateFieldType,
		arg.ID,
		arg.Name,
		arg.TypeDiscriminatorID,
		arg.Properties,
	)
	var i FieldType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.TypeDiscriminatorID,
		&i.Properties,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

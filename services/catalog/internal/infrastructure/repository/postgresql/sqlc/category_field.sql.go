// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: category_field.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const assignFieldToCategory = `-- name: AssignFieldToCategory :exec
INSERT INTO category_fields (
    category_id, field_id, is_required, display_order
) VALUES (
    $1, $2, $3, $4
)
`

type AssignFieldToCategoryParams struct {
	CategoryID   uuid.UUID    `json:"categoryId"`
	FieldID      uuid.UUID    `json:"fieldId"`
	IsRequired   sql.NullBool `json:"isRequired"`
	DisplayOrder int32        `json:"displayOrder"`
}

func (q *Queries) AssignFieldToCategory(ctx context.Context, arg AssignFieldToCategoryParams) error {
	_, err := q.db.ExecContext(ctx, assignFieldToCategory,
		arg.CategoryID,
		arg.FieldID,
		arg.IsRequired,
		arg.DisplayOrder,
	)
	return err
}

const getCategoryFields = `-- name: GetCategoryFields :many
SELECT f.id, f.name, f.description, f.field_type_id, f.created_at, f.updated_at, cf.is_required, cf.display_order
FROM fields f
JOIN category_fields cf ON f.id = cf.field_id
WHERE cf.category_id = $1
ORDER BY cf.display_order
`

type GetCategoryFieldsRow struct {
	ID           uuid.UUID      `json:"id"`
	Name         string         `json:"name"`
	Description  sql.NullString `json:"description"`
	FieldTypeID  uuid.UUID      `json:"fieldTypeId"`
	CreatedAt    time.Time      `json:"createdAt"`
	UpdatedAt    time.Time      `json:"updatedAt"`
	IsRequired   sql.NullBool   `json:"isRequired"`
	DisplayOrder int32          `json:"displayOrder"`
}

func (q *Queries) GetCategoryFields(ctx context.Context, categoryID uuid.UUID) ([]GetCategoryFieldsRow, error) {
	rows, err := q.db.QueryContext(ctx, getCategoryFields, categoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCategoryFieldsRow{}
	for rows.Next() {
		var i GetCategoryFieldsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.FieldTypeID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsRequired,
			&i.DisplayOrder,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

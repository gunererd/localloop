// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: field_type_discriminator.sql

package sqlc

import (
	"context"
	"database/sql"
	"encoding/json"

	"github.com/google/uuid"
)

const createFieldTypeDiscriminator = `-- name: CreateFieldTypeDiscriminator :one
INSERT INTO field_type_discriminators (
    id,
    name,
    description,
    validation_schema
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, name, description, validation_schema, created_at
`

type CreateFieldTypeDiscriminatorParams struct {
	ID               uuid.UUID       `json:"id"`
	Name             string          `json:"name"`
	Description      sql.NullString  `json:"description"`
	ValidationSchema json.RawMessage `json:"validationSchema"`
}

func (q *Queries) CreateFieldTypeDiscriminator(ctx context.Context, arg CreateFieldTypeDiscriminatorParams) (FieldTypeDiscriminator, error) {
	row := q.db.QueryRowContext(ctx, createFieldTypeDiscriminator,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.ValidationSchema,
	)
	var i FieldTypeDiscriminator
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ValidationSchema,
		&i.CreatedAt,
	)
	return i, err
}

const deleteFieldTypeDiscriminator = `-- name: DeleteFieldTypeDiscriminator :exec
DELETE FROM field_type_discriminators
WHERE id = $1
`

func (q *Queries) DeleteFieldTypeDiscriminator(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteFieldTypeDiscriminator, id)
	return err
}

const getFieldTypeDiscriminator = `-- name: GetFieldTypeDiscriminator :one
SELECT id, name, description, validation_schema, created_at FROM field_type_discriminators
WHERE id = $1
`

func (q *Queries) GetFieldTypeDiscriminator(ctx context.Context, id uuid.UUID) (FieldTypeDiscriminator, error) {
	row := q.db.QueryRowContext(ctx, getFieldTypeDiscriminator, id)
	var i FieldTypeDiscriminator
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ValidationSchema,
		&i.CreatedAt,
	)
	return i, err
}

const listFieldTypeDiscriminators = `-- name: ListFieldTypeDiscriminators :many
SELECT id, name, description, validation_schema, created_at FROM field_type_discriminators
`

func (q *Queries) ListFieldTypeDiscriminators(ctx context.Context) ([]FieldTypeDiscriminator, error) {
	rows, err := q.db.QueryContext(ctx, listFieldTypeDiscriminators)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FieldTypeDiscriminator{}
	for rows.Next() {
		var i FieldTypeDiscriminator
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ValidationSchema,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFieldTypeDiscriminator = `-- name: UpdateFieldTypeDiscriminator :one
UPDATE field_type_discriminators
SET name = $2,
    description = $3,
    validation_schema = $4
WHERE id = $1
RETURNING id, name, description, validation_schema, created_at
`

type UpdateFieldTypeDiscriminatorParams struct {
	ID               uuid.UUID       `json:"id"`
	Name             string          `json:"name"`
	Description      sql.NullString  `json:"description"`
	ValidationSchema json.RawMessage `json:"validationSchema"`
}

func (q *Queries) UpdateFieldTypeDiscriminator(ctx context.Context, arg UpdateFieldTypeDiscriminatorParams) (FieldTypeDiscriminator, error) {
	row := q.db.QueryRowContext(ctx, updateFieldTypeDiscriminator,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.ValidationSchema,
	)
	var i FieldTypeDiscriminator
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ValidationSchema,
		&i.CreatedAt,
	)
	return i, err
}
